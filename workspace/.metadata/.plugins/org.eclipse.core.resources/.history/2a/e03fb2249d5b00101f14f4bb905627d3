create database dml;
use dml;

drop table tbl_zoo;
create table tbl_zoo(
   id bigint unsigned auto_increment primary key,
   zoo_name varchar(255) not null,
   zoo_address varchar(255) not null,
   zoo_address_detail varchar(255) not null,
   zoo_max_animal int check (zoo_max_animal > 0)
);

truncate table tbl_zoo;

/*insert into tbl_zoo
values(1, '애버랜드', '경기도 용인시', '12345', 10);
insert into tbl_zoo
values(2, '서울랜드', '경기도 과천', '55555', 5);*/

insert into tbl_zoo (zoo_name, zoo_address, zoo_address_detail, zoo_max_animal)
values('애버랜드', '경기도 용인시', '12345', 10);
insert into tbl_zoo (zoo_name, zoo_address, zoo_address_detail, zoo_max_animal)
values('서울랜드', '경기도 과천', '55555', 5);

/*select 
   id, zoo_name, zoo_address, 
   zoo_address_detail, zoo_max_animal 
from tbl_zoo
where id = 2;*/

select * from tbl_zoo;
create table tbl_animal(
   id bigint unsigned auto_increment primary key,
   animal_name varchar(255) not null,
   animal_type varchar(255) not null,
   animal_age int default 0,
   animal_height decimal(5, 2) check(animal_height > 0),
   animal_weight decimal(5, 2) check(animal_weight > 0),
   zoo_id bigint unsigned,
   constraint fk_animal_zoo foreign key(zoo_id)
   references tbl_zoo(id)
);

select * from tbl_zoo;
select * from tbl_animal;

insert into tbl_animal (animal_name, animal_type, animal_height, animal_weight)
values('호돌이', '호랑이', 205.42, 115.25);

update tbl_animal
set zoo_id = 1
where id = 2;

delete from tbl_animal
where id = 1;

/*insert 실습*/
/*첫번째 동물원에 두 마리의 동물*/
insert into tbl_animal (animal_name, animal_type, animal_height, animal_weight, zoo_id)
values('코붕이', '코끼리', 300.42, 999.25, 1);
insert into tbl_animal (animal_name, animal_type, animal_height, animal_weight, zoo_id)
values('장대', '기린', 800.42, 500.25, 1);

select * from tbl_animal
where zoo_id = 1;

/*두번째 동물원에 한 마리의 동물*/
insert into tbl_animal (animal_name, animal_type, animal_height, animal_weight)
values('꼬꼬', '독수리', 88.42, 44.25);

update tbl_animal
set zoo_id = 2
where id = 5;

select * from tbl_animal
where zoo_id = 2;

/*동물원 중에서 최대 수용 동물 수가 5보다 큰 동물원 조회*/
select * from tbl_zoo
where zoo_max_animal > 5;

/*동물원 중 1번 동물원의 동물 나이를 모두 1씩 증가*/
select * from tbl_animal;

update tbl_animal
set animal_age = animal_age + 1
where zoo_id = 1;

select * from tbl_animal
where zoo_id = 1;

/*동물 중에서 1번 동물원에 지내고 있는 동물 모두 삭제*/
select * from tbl_animal;

delete from tbl_animal
where zoo_id = 1;

select * from tbl_animal
where zoo_id = 1;

/****************************************************************************/

create table tbl_company(
   id bigint unsigned auto_increment primary key,
   company_name varchar(255),
   company_address varchar(255)
);

create table tbl_employee(
   id bigint unsigned auto_increment primary key,
   employee_name varchar(255),
   company_id bigint unsigned,
   constraint fk_employee_comapny foreign key(company_id)
   references tbl_company(id)
);

/*insert*/
/*회사 2군데 추가*/
select * from tbl_company;
select * from tbl_employee;

insert into tbl_company(company_name, company_address)
values('코리아', '역삼');
insert into tbl_company(company_name, company_address)
values('삼성', '논현');

/*각 회사에 직원 2명씩 추가*/
select * from tbl_company;
select * from tbl_employee;

insert into tbl_employee(employee_name, company_id)
values('홍길동', 1);
insert into tbl_employee(employee_name, company_id)
values('이순신', 1);
insert into tbl_employee(employee_name, company_id)
values('둘리', 2);
insert into tbl_employee(employee_name, company_id)
values('또치', 2);

/*select*/
/*'홍길동' 직원의 전체 정보 조회 */
select * from tbl_employee
where employee_name = '홍길동';

/*'홍길동' 또는 '이순신' 직원의 전체 정보 조회*/
select * from tbl_employee
where employee_name = '홍길동' or employee_name = '이순신';

/*'코리아'회사의 전체 정보 조회*/
select * from tbl_company
where company_name = '코리아';

/*update*/
/*'코리아' 회사에 다니는 직원의 이름을 모두 '둘리'로 수정*/
select id from tbl_company
where company_name = '코리아';

select * from tbl_employee
where company_id = 1;

update tbl_employee
set employee_name = '둘리'
where company_id = 1;

select * from tbl_employee
where company_id = 1;

/*delete*/
/*'홍길동' 직원 삭제 */
select * from tbl_employee
where employee_name = '둘리';

delete from tbl_employee
where employee_name = '둘리';

/****************************************************************************/
create table tbl_member(
   id bigint unsigned auto_increment primary key,
   member_id varchar(255),
   member_password varchar(255),
   member_age int,
   member_name varchar(255)
);

create table tbl_like(
   id bigint unsigned auto_increment primary key,
   like_receiver bigint unsigned,
   like_sender bigint unsigned,
   constraint fk_like_receiver_member foreign key(like_receiver)
   references tbl_member(id),
   constraint fk_like_sender_member foreign key(like_sender)
   references tbl_member(id)
);

/*insert*/
/*회원 3명 추가*/
insert into tbl_member
(member_id, member_password, member_age, member_name)
values('test1234', '1234', 10, '홍길동');
insert into tbl_member
(member_id, member_password, member_age, member_name)
values('test5555', '1234', 20, '이순신');
insert into tbl_member
(member_id, member_password, member_age, member_name)
values('test7777', '1234', 30, '장보고');

select * from tbl_member;
select * from tbl_like;
/*1번 -> 2번 좋아요*/
insert into tbl_like(like_receiver, like_sender)
values(2, 1);
/*1번 -> 3번 좋아요*/
insert into tbl_like(like_receiver, like_sender)
values(3, 1);
/*2번 -> 1번 좋아요*/
insert into tbl_like(like_receiver, like_sender)
values(1, 2);

select * from tbl_like;

/*select*/
/*1번을 좋아요 한 전체 회원 번호 조회*/
select * from tbl_like
where like_receiver = 1;

select * from tbl_member
where id = 2;

/*이름이 '홍길동'인 회원을 좋아요한 회원의 이름 조회*/
select * from tbl_member
where member_name = '홍길동';

select * from tbl_like
where like_receiver = 1;

select member_name from tbl_member
where id = 2;

/*update*/
/*2번 -> 1번 좋아요 취소, 2번 -> 3번 좋아요*/
update tbl_like 
set like_receiver = 3
where like_sender = 2 and like_receiver = 1;

select * from tbl_like
where like_sender = 2;

/*delete*/
/*1번 -> 2번 좋아요 취소*/
delete from tbl_like
where like_sender = 1 and like_receiver = 2;

select * from tbl_like
where like_sender = 1 and like_receiver = 2;

/****************************************************************************/
create table tbl_member(
   id bigint unsigned auto_increment primary key,
   member_id varchar(255),
   member_password varchar(255),
   member_age int,
   member_name varchar(255)
);
create table tbl_post(
   id bigint unsigned auto_increment primary key,
   post_title varchar(255) not null,
   post_content varchar(255) not null,
   created_date datetime default current_timestamp(),
   member_id bigint unsigned,
   constraint fk_post_member foreign key(member_id)
   references tbl_member(id)
);

insert into tbl_member
(member_id, member_password, member_age, member_name)
values('test1234', '1234', 10, '홍길동');
insert into tbl_member
(member_id, member_password, member_age, member_name)
values('test5555', '1234', 20, '이순신');
insert into tbl_member
(member_id, member_password, member_age, member_name)
values('test7777', '1234', 30, '장보고');

select * from tbl_member;

select * from tbl_post;
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 1);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 1);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 2);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 2);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 2);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 2);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 1);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 1);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 1);

select p.post_title, p.post_content, m.member_name
from tbl_member m join tbl_post p
on m.id = p.member_id;

create table tbl_reply(
   id bigint unsigned auto_increment primary key,
   reply_content varchar(255),
   member_id bigint unsigned,
   post_id bigint unsigned,
   constraint fk_reply_member foreign key(member_id)
   references tbl_member(id),
   constraint fk_reply_post foreign key(post_id)
   references tbl_post(id)
);

INSERT INTO tbl_reply
(reply_content, member_id, post_id)
VALUES('테스트 댓글1', 3, 1);
INSERT INTO tbl_reply
(reply_content, member_id, post_id)
VALUES('테스트 댓글1', 2, 2);
INSERT INTO tbl_reply
(reply_content, member_id, post_id)
VALUES('테스트 댓글1', 2, 1);
INSERT INTO tbl_reply
(reply_content, member_id, post_id)
VALUES('테스트 댓글1', 1, 3);


/*댓글을 작성한 작성자 이름 조회*/
select r.reply_content, m.member_name 
from tbl_reply r join tbl_member m
on r.member_id = m.id;

/*댓글이 달린 게시글 제목 조회*/
select p.post_title, p.post_content, r.reply_content 
from tbl_reply r join tbl_post p
on r.post_id = p.id;

/*id가 test5555인 회원이 작성한 게시글 정보와 회원의 이름과 나이 조회*/
select p.id, p.post_title, p.post_content, p.created_date, m.member_name, m.member_age 
from tbl_member m join tbl_post p
on m.id = p.member_id and m.member_id = 'test5555';

/*댓글 작성자 중 나이가 10살인 회원 정보와 댓글 정보 조회*/
select * from tbl_reply r join tbl_member m
on r.member_id = m.id and m.member_age = 10;

/*댓글이 달린 게시글 정보와 댓글 정보 조회*/
select * from tbl_reply r join tbl_post p
on r.post_id = p.id;

/****************************************************************************/
create table tbl_user(
   id bigint unsigned auto_increment primary key,
   user_email varchar(255) unique not null,
   user_password varchar(255) not null,
   user_name varchar(255) not null,
   user_address varchar(255) not null,
   user_birth date
);

create table tbl_product(
   id bigint unsigned auto_increment primary key,
   product_name varchar(255) not null,
   product_price int default 0,
   product_stock int default 0
);

create table tbl_order(
   id bigint unsigned auto_increment primary key,
   order_date datetime default current_timestamp(),
   user_id bigint unsigned,
   product_id bigint unsigned,
   constraint fk_order_user foreign key(user_id)
   references tbl_user(id),
   constraint fk_order_product foreign key(product_id)
   references tbl_product(id)
);

select*from tbl_user;

insert into tbl_user (user_email ,user_password,user_name ,
user_address ,user_birth)
values ('test@gmail.com','1234','테스트','서울시 강남구','2000-12-04');
insert into tbl_user (user_email ,user_password,user_name ,
user_address ,user_birth)
values ('test2@gmail.com','1234','테스트2','서울시 강남구','2000-01-01');

select user_birth from tbl_user;

select*from tbl_product ;

insert into tbl_product (product_name,product_price,product_stock)
values('핸드폰',400000,30),('게임기v1',150000,5),('게임기v2',200000,6),('마우스',55000,52);

select concat('상품명:',product_name) from tbl_product;

select*from tbl_order  ;

insert into tbl_order (user_id,product_id)
values(1 , 3),(1 , 2),(2 , 3),(2 , 1),(2 , 3),(1 , 1),(2 , 1);

select date_format(order_date,'%Y년 %m월 %d일 %h시 %i분 %s조') '주문 날짜' from tbl_order ;

/*구매자 이름, 구매자가 구매한 상품이름 조회*/

select user_name  from tbl_user;

select u.user_name,p.product_name  from tbl_product p join tbl_order o 
on p.id =o.product_id join tbl_user u on u.id =o.user_id
;


/*
 * like: 포함된 문자열값을 찾고 , 문자의 개수도 제한을 줄 수 있다..
 * '%A' :A로 끝나는 모든 값
 * 'A%' :A로 시작하는 모든 값
 * '%A%':A가 포함된 모든 값
 * 'A_' :A로 시작하면서 2글자인 값
 * '__A':A로 끝나면서 3글자인 값  
 */

select * from tbl_product 
where  product_name like '%v%';
drop table tbl_test;


/*
 * ▶ index: buffer에 Page형태로 저장되어 전체 데이터를 검색하는 것 보다(full scan) 더 빠르다.
 * */
/*
 * ▶ search type
 * range: 인덱스 범위 스캔 (BETWEEN, LIKE, 'abc%')
 * index: 인덱스 전체 스캔 (상대적으로 느리다)
 * ALL: 테이블 전체 스캔 (느리다)
 * */
/*
 * ▶ 용도
 * index: =, like('abc%'), join, order by, group by
 * fulltext index: 자연어 검색, 부분 문자열 검색
 * */
/*
 * ▶ 최적 조건
 * index: =, >, <, between, like
 * fulltext index: match() against()
 * */
/*
 * ▶ 활용
 * index: where, join, group by, order by 모두 활용 가능
 * fulltext index: where, having, join 등에서 match()로 활용 가능
 * */
create table tbl_test(
   name varchar(255)
);

select * from tbl_test;

insert into tbl_test
values('김석'), ('한동석'), ('홍길동');

select * from tbl_test
where name = '한동석';

select * from tbl_test
where name like '한%';

select * from tbl_test
where name like '%한';

select * from tbl_test
where name like '%한%';
/***************************************************************/
drop table tbl_test;
create table tbl_test(
   name varchar(255),
   index(name)
);

insert into tbl_test
values('김석'), ('한동석'), ('홍길동');

select * from tbl_test;

select * from tbl_test
where name like '한%';

select * from tbl_test
where name like '%한';

select * from tbl_test
where name like '%한%';

drop table tbl_test;

/**/
create table tbl_test(
   name varchar(255),
   fulltext(name)
);

insert into tbl_test
values('김석'), ('한동석'), ('홍길동');

select * from tbl_test
where match(name) against('한동석');

show variables like 'ngram_token_size';
/**/
drop table tbl_test;
create table tbl_test(
   name varchar(255)
);

create fulltext index fk_idx_name on tbl_test(name) with parser ngram;

insert into tbl_test
values('김석'), ('한동석'), ('홍길동');

select * from tbl_test
where match(name) against('한동' in boolean mode);

show variables like 'ngram_token_size';


/***************************************************************/
/*
 * 집계 함수
 * 
 * 평균 avg()
 * 최대값 max()
 * 최소값 min()
 * 총합 sum()
 * 개수 count()
 * */

create table tbl_owner(
   id bigint unsigned auto_increment primary key,
   owner_name varchar(255) not null,
   owner_age int default 0,
   owner_phone varchar(255) not null,
   owner_address varchar(255) not null,
   owner_type enum('owner', 'center') default 'owner'
);

create table tbl_pet(
   id bigint unsigned auto_increment primary key,
   pet_ill_name varchar(255) not null,
   pet_name varchar(255),
   pet_age int not null,
   pet_weight decimal(5, 2) not null,
   owner_id bigint unsigned unsigned,
   constraint fk_pet_owner foreign key(owner_id)
   references tbl_owner(id)
);