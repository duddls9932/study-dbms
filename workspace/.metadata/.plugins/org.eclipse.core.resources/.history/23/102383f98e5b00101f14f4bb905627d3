create database dml;
use dml;

drop table tbl_zoo;
create table tbl_zoo(
   id bigint unsigned auto_increment primary key,
   zoo_name varchar(255) not null,
   zoo_address varchar(255) not null,
   zoo_address_detail varchar(255) not null,
   zoo_max_animal int check (zoo_max_animal > 0)
);

truncate table tbl_zoo;

/*insert into tbl_zoo
values(1, '애버랜드', '경기도 용인시', '12345', 10);
insert into tbl_zoo
values(2, '서울랜드', '경기도 과천', '55555', 5);*/

insert into tbl_zoo (zoo_name, zoo_address, zoo_address_detail, zoo_max_animal)
values('애버랜드', '경기도 용인시', '12345', 10);
insert into tbl_zoo (zoo_name, zoo_address, zoo_address_detail, zoo_max_animal)
values('서울랜드', '경기도 과천', '55555', 5);

/*select 
   id, zoo_name, zoo_address, 
   zoo_address_detail, zoo_max_animal 
from tbl_zoo
where id = 2;*/

select * from tbl_zoo;
create table tbl_animal(
   id bigint unsigned auto_increment primary key,
   animal_name varchar(255) not null,
   animal_type varchar(255) not null,
   animal_age int default 0,
   animal_height decimal(5, 2) check(animal_height > 0),
   animal_weight decimal(5, 2) check(animal_weight > 0),
   zoo_id bigint unsigned,
   constraint fk_animal_zoo foreign key(zoo_id)
   references tbl_zoo(id)
);

select * from tbl_zoo;
select * from tbl_animal;

insert into tbl_animal (animal_name, animal_type, animal_height, animal_weight)
values('호돌이', '호랑이', 205.42, 115.25);

update tbl_animal
set zoo_id = 1
where id = 2;

delete from tbl_animal
where id = 1;

/*insert 실습*/
/*첫번째 동물원에 두 마리의 동물*/
insert into tbl_animal (animal_name, animal_type, animal_height, animal_weight, zoo_id)
values('코붕이', '코끼리', 300.42, 999.25, 1);
insert into tbl_animal (animal_name, animal_type, animal_height, animal_weight, zoo_id)
values('장대', '기린', 800.42, 500.25, 1);

select * from tbl_animal
where zoo_id = 1;

/*두번째 동물원에 한 마리의 동물*/
insert into tbl_animal (animal_name, animal_type, animal_height, animal_weight)
values('꼬꼬', '독수리', 88.42, 44.25);

update tbl_animal
set zoo_id = 2
where id = 5;

select * from tbl_animal
where zoo_id = 2;

/*동물원 중에서 최대 수용 동물 수가 5보다 큰 동물원 조회*/
select * from tbl_zoo
where zoo_max_animal > 5;

/*동물원 중 1번 동물원의 동물 나이를 모두 1씩 증가*/
select * from tbl_animal;

update tbl_animal
set animal_age = animal_age + 1
where zoo_id = 1;

select * from tbl_animal
where zoo_id = 1;

/*동물 중에서 1번 동물원에 지내고 있는 동물 모두 삭제*/
select * from tbl_animal;

delete from tbl_animal
where zoo_id = 1;

select * from tbl_animal
where zoo_id = 1;

/****************************************************************************/

create table tbl_company(
   id bigint unsigned auto_increment primary key,
   company_name varchar(255),
   company_address varchar(255)
);

create table tbl_employee(
   id bigint unsigned auto_increment primary key,
   employee_name varchar(255),
   company_id bigint unsigned,
   constraint fk_employee_comapny foreign key(company_id)
   references tbl_company(id)
);

/*insert*/
/*회사 2군데 추가*/
select * from tbl_company;
select * from tbl_employee;

insert into tbl_company(company_name, company_address)
values('코리아', '역삼');
insert into tbl_company(company_name, company_address)
values('삼성', '논현');

/*각 회사에 직원 2명씩 추가*/
select * from tbl_company;
select * from tbl_employee;

insert into tbl_employee(employee_name, company_id)
values('홍길동', 1);
insert into tbl_employee(employee_name, company_id)
values('이순신', 1);
insert into tbl_employee(employee_name, company_id)
values('둘리', 2);
insert into tbl_employee(employee_name, company_id)
values('또치', 2);

/*select*/
/*'홍길동' 직원의 전체 정보 조회 */
select * from tbl_employee
where employee_name = '홍길동';

/*'홍길동' 또는 '이순신' 직원의 전체 정보 조회*/
select * from tbl_employee
where employee_name = '홍길동' or employee_name = '이순신';

/*'코리아'회사의 전체 정보 조회*/
select * from tbl_company
where company_name = '코리아';

/*update*/
/*'코리아' 회사에 다니는 직원의 이름을 모두 '둘리'로 수정*/
select id from tbl_company
where company_name = '코리아';

select * from tbl_employee
where company_id = 1;

update tbl_employee
set employee_name = '둘리'
where company_id = 1;

select * from tbl_employee
where company_id = 1;

/*delete*/
/*'홍길동' 직원 삭제 */
select * from tbl_employee
where employee_name = '둘리';

delete from tbl_employee
where employee_name = '둘리';

/****************************************************************************/
create table tbl_member(
   id bigint unsigned auto_increment primary key,
   member_id varchar(255),
   member_password varchar(255),
   member_age int,
   member_name varchar(255)
);

create table tbl_like(
   id bigint unsigned auto_increment primary key,
   like_receiver bigint unsigned,
   like_sender bigint unsigned,
   constraint fk_like_receiver_member foreign key(like_receiver)
   references tbl_member(id),
   constraint fk_like_sender_member foreign key(like_sender)
   references tbl_member(id)
);

/*insert*/
/*회원 3명 추가*/
insert into tbl_member
(member_id, member_password, member_age, member_name)
values('test1234', '1234', 10, '홍길동');
insert into tbl_member
(member_id, member_password, member_age, member_name)
values('test5555', '1234', 20, '이순신');
insert into tbl_member
(member_id, member_password, member_age, member_name)
values('test7777', '1234', 30, '장보고');

select * from tbl_member;
select * from tbl_like;
/*1번 -> 2번 좋아요*/
insert into tbl_like(like_receiver, like_sender)
values(2, 1);
/*1번 -> 3번 좋아요*/
insert into tbl_like(like_receiver, like_sender)
values(3, 1);
/*2번 -> 1번 좋아요*/
insert into tbl_like(like_receiver, like_sender)
values(1, 2);

select * from tbl_like;

/*select*/
/*1번을 좋아요 한 전체 회원 번호 조회*/
select * from tbl_like
where like_receiver = 1;

select * from tbl_member
where id = 2;

/*이름이 '홍길동'인 회원을 좋아요한 회원의 이름 조회*/
select * from tbl_member
where member_name = '홍길동';

select * from tbl_like
where like_receiver = 1;

select member_name from tbl_member
where id = 2;

/*update*/
/*2번 -> 1번 좋아요 취소, 2번 -> 3번 좋아요*/
update tbl_like 
set like_receiver = 3
where like_sender = 2 and like_receiver = 1;

select * from tbl_like
where like_sender = 2;

/*delete*/
/*1번 -> 2번 좋아요 취소*/
delete from tbl_like
where like_sender = 1 and like_receiver = 2;

select * from tbl_like
where like_sender = 1 and like_receiver = 2;

/****************************************************************************/
create table tbl_member(
   id bigint unsigned auto_increment primary key,
   member_id varchar(255),
   member_password varchar(255),
   member_age int,
   member_name varchar(255)
);
create table tbl_post(
   id bigint unsigned auto_increment primary key,
   post_title varchar(255) not null,
   post_content varchar(255) not null,
   created_date datetime default current_timestamp(),
   member_id bigint unsigned,
   constraint fk_post_member foreign key(member_id)
   references tbl_member(id)
);

insert into tbl_member
(member_id, member_password, member_age, member_name)
values('test1234', '1234', 10, '홍길동');
insert into tbl_member
(member_id, member_password, member_age, member_name)
values('test5555', '1234', 20, '이순신');
insert into tbl_member
(member_id, member_password, member_age, member_name)
values('test7777', '1234', 30, '장보고');

select * from tbl_member;

select * from tbl_post;
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 1);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 1);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 2);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 2);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 2);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 2);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 1);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 1);
insert into tbl_post(post_title, post_content, member_id)
values('테스트 제목1', '테스트 내용1', 1);

select p.post_title, p.post_content, m.member_name
from tbl_member m join tbl_post p
on m.id = p.member_id;

create table tbl_reply(
   id bigint unsigned auto_increment primary key,
   reply_content varchar(255),
   member_id bigint unsigned,
   post_id bigint unsigned,
   constraint fk_reply_member foreign key(member_id)
   references tbl_member(id),
   constraint fk_reply_post foreign key(post_id)
   references tbl_post(id)
);

INSERT INTO tbl_reply
(reply_content, member_id, post_id)
VALUES('테스트 댓글1', 3, 1);
INSERT INTO tbl_reply
(reply_content, member_id, post_id)
VALUES('테스트 댓글1', 2, 2);
INSERT INTO tbl_reply
(reply_content, member_id, post_id)
VALUES('테스트 댓글1', 2, 1);
INSERT INTO tbl_reply
(reply_content, member_id, post_id)
VALUES('테스트 댓글1', 1, 3);


/*댓글을 작성한 작성자 이름 조회*/
select r.reply_content, m.member_name 
from tbl_reply r join tbl_member m
on r.member_id = m.id;

/*댓글이 달린 게시글 제목 조회*/
select p.post_title, p.post_content, r.reply_content 
from tbl_reply r join tbl_post p
on r.post_id = p.id;

/*id가 test5555인 회원이 작성한 게시글 정보와 회원의 이름과 나이 조회*/
select p.id, p.post_title, p.post_content, p.created_date, m.member_name, m.member_age 
from tbl_member m join tbl_post p
on m.id = p.member_id and m.member_id = 'test5555';

/*댓글 작성자 중 나이가 10살인 회원 정보와 댓글 정보 조회*/
select * from tbl_reply r join tbl_member m
on r.member_id = m.id and m.member_age = 10;

/*댓글이 달린 게시글 정보와 댓글 정보 조회*/
select * from tbl_reply r join tbl_post p
on r.post_id = p.id;


CREATE TABLE Users (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100)
);

CREATE TABLE Books (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(100),
  author VARCHAR(100)
);

CREATE TABLE Rentals (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  user_id BIGINT UNSIGNED,
  book_id BIGINT UNSIGNED,
  rental_date DATE,
  FOREIGN KEY (user_id) REFERENCES Users(id),
  FOREIGN KEY (book_id) REFERENCES Books(id)
);

INSERT INTO Users (name, email) VALUES 
('Alice', 'alice@email.com'),
('Bob', 'bob@email.com'),
('Charlie', 'charlie@email.com');

INSERT INTO Books (title, author) VALUES 
('SQL 기초', '김데이터'),
('파이썬 마스터', '박개발'),
('알고리즘 여행', '이알고');

INSERT INTO Rentals (user_id, book_id, rental_date) VALUES 
(1, 2, '2024-07-01'), 
(1, 3, '2024-07-02'), 
(2, 1, '2024-07-03');

select * from rentals;
select * from books;
select * from users;
-- *Alice가 대여한 책의 제목과 저자를 모두 출력하시오.*
select b.title,b.author from rentals r join users u 
on r.user_id = u.id join books b on r.book_id = b.id
where u.name='Alice';

-- Alice가 대여한 책의 제목과 저자를 출력하고, 그 책을 대여한 다른 사용자 이름도 같이 출력하시오.
select b.title,b.author from rentals r join users u 
on r.user_id = u.id join books b on r.book_id = b.id
where u.name='Alice';


